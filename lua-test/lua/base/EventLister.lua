--- 事件注册，触发
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 無心道(15388152619).
--- DateTime: 2024/10/31 16:54

require("GameDebug")

---事件注册
EventListerTable = {}
local __Recharge_Type = {}
local __Recharge_PlayerDbKey = {}
local __Recharge_GlobalDbKey = {}
---注册全局key
function EventListerTable.registerType(name, type, playerDbKey, globalDbKey)
    gameDebug.assertTrue(playerDbKey ~= nil or globalDbKey ~= nil, "充值玩家数据库key或充值全局数据库key不能为空")
    type = tostring(type)
    gameDebug.assertNotNil(__Recharge_Type[type], "充值类型", type, "模块", __Recharge_Type[type])
    __Recharge_Type[type] = name
    if playerDbKey then
        playerDbKey = tostring(playerDbKey)
        gameDebug.assertNotNil(__Recharge_PlayerDbKey[playerDbKey], "充值玩家数据库key", playerDbKey, "模块", __Recharge_PlayerDbKey[playerDbKey])
        __Recharge_PlayerDbKey[playerDbKey] = name
    end
    if globalDbKey then
        globalDbKey = tostring(globalDbKey)
        gameDebug.assertNotNil(__Recharge_GlobalDbKey[globalDbKey], "充值全局数据库", globalDbKey, "模块", __Recharge_GlobalDbKey[globalDbKey], "冲突")
        __Recharge_GlobalDbKey[globalDbKey] = name
    end
end

--- 获取事件容器
---@param eventType any 事件类型
function EventListerTable.eventMap(map, eventType, eventName)
    gameDebug.assertNil(map, "数据集合异常")
    eventType = tostring(eventType)
    gameDebug.assertNil(__Recharge_Type[eventType], "不存在事件类型", eventType, "模块", eventName)
    if not map[eventType] then
        map[eventType] = {}
    end
    return map[eventType]
end

--- 注册事件
---@param eventType any 事件类型
---@param eventName string 事件名称
---@param eventFun function 事件回调函数
function EventListerTable.eventLister(map, eventType, eventName, eventFun)
    local em = EventListerTable.eventMap(map, eventType, eventName)
    gameDebug.assertNotNil(em[eventName], "存在相同的事件【" .. eventName .. "】注册")
    em[eventName] = eventFun
    --gameDebug.printType(_VERSION, "注册事件:", self, em, eventType, eventName)
end

--- 触发事件
---@param eventType any 事件类型
---@param name string 事件名称
---@param ... any 事件参数
function EventListerTable.triggerEvent(self, eventType, ...)
    local em = EventListerTable.eventMap(self, eventType)
    if em then
        for k, v in pairs(em) do
            print("触发事件", k)
            local s, e = xpcall(v, debug.traceback, ...)
            gameDebug.assertPrintTrace(s, "触发事件", k, "调用异常", e, ...)
        end
    end
end
EventListerTable.registerType("默认", 0, "player_db_key", "global_db_key")
--- 充值事件触发监听
RechargeEventListerTable = {  }
--- 充值消息路由监听
RechargeMessageEventListerTable = {  }
return EventListerTable