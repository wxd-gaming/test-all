<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>gvm</groupId>
        <artifactId>gvm</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>gvm.test.c</artifactId>

    <dependencies>
        <dependency>
            <groupId>gvm</groupId>
            <artifactId>gvm.test.a</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>gvm</groupId>
            <artifactId>gvm.test.b</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
        <!--        <dependency>-->
        <!--            <groupId>com.oracle.substratevm</groupId>-->
        <!--            <artifactId>svm</artifactId>-->
        <!--            <version>19.2.1</version>-->
        <!--            <scope>provided</scope>-->
        <!--        </dependency>-->
        <!--        <dependency>-->
        <!--            <groupId>com.oracle.substratevm</groupId>-->
        <!--            <artifactId>svm-driver</artifactId>-->
        <!--            <version>19.2.1</version>-->
        <!--        </dependency>-->
        <!--        <dependency>-->
        <!--            <groupId>org.graalvm.nativeimage</groupId>-->
        <!--            <artifactId>svm</artifactId>-->
        <!--            <version>24.0.1</version>-->
        <!--            <scope>provided</scope>-->
        <!--        </dependency>-->
    </dependencies>

    <build>
        <finalName>c</finalName>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <configuration>
                    <appendAssemblyId>false</appendAssemblyId>
                    <descriptors>
                        <descriptor>src/main/resources/assembly.xml</descriptor>
                    </descriptors>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                    <!-- 需要main方法可执行的jar，请添加如下代码 -->
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>lib/</classpathPrefix>
                            <useUniqueVersions>false</useUniqueVersions>
                            <!-- 加载主要运行类 -->
                            <mainClass>gvm.test.c.Main</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <!--
                    1. 加密后,方法体被清空,保留方法参数、注解等信息.主要兼容swagger文档注解扫描
                    2. 方法体被清空后,反编译只能看到方法名和注解,看不到方法体的具体内容
                    3. 加密后的项目需要设置javaagent来启动,启动过程中解密class,完全内存解密,不留下任何解密后的文件
                    4. 启动加密后的jar,生成xxx-encrypted.jar,这个就是加密后的jar文件,加密后不可直接执行
                    5. 无密码启动方式,java -javaagent:xxx-encrypted.jar -jar xxx-encrypted.jar
                    6. 有密码启动方式,java -javaagent:xxx-encrypted.jar='-pwd= 密码' -jar xxx-encrypted.jar
                -->
                <groupId>net.roseboy</groupId>
                <artifactId>classfinal-maven-plugin</artifactId>
                <version>1.2.1</version>
                <configuration>
                    <password>123456</password><!-- #表示启动时不需要密码,事实上对于代码混淆来说,这个密码没什么用,它只是一个启动密码 -->
                    <excludes>java/**,javax,com.alibaba</excludes>
                    <packages>com.sh,gvm.test</packages><!-- 加密的包名,多个包用逗号分开 -->
                    <cfgfiles></cfgfiles><!-- 加密的配置文件,多个包用逗号分开 -->
                    <libjars></libjars> <!-- jar包lib下面要加密的jar依赖文件,多个包用逗号分开 -->
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>classFinal</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>